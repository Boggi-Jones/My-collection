# Autogenerated from websocket_interface.template file
from app.Functions.drug_functions import DrugFunctions
from app.Models.drugclass import Drug
from app.Functions.nurse_functions import NurseFunctions
import json
from app.Functions.patient_functions import PatientFunction
from app.Functions.doctor_functions import DoctorFunctions
from app.Functions.appointment_functions import AppointmentFunctions
from app.Models.appointmentclass import Appointment

class HospitalserverInterface:
  def __init__(self):
    self.drug_functions = DrugFunctions()
    self.doctor_functions = DoctorFunctions()

  def readAll_patient(self, data):
    return json.dumps({"msg": PatientFunction().readAll_patient()})

  def add_patient (self, data):
    if all (param in data for param in ("ssn", "name", "allergies")):
      pf = PatientFunction()
      new_patient = json.loads(data)
      if len(new_patient["ssn"]) != 10:
        return '{"msg":"cannot add a patient where ssn is not length 10"}'
      if new_patient["ssn"] in pf.patient_list:
        return '{"msg":"Can not add an id that already exists"}'
      pf.create_patient(new_patient)
      name = new_patient["name"]
      msg = f"Successfully added patient: {name}"
      return '{"msg":"' + msg + '"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: patientdetails."}'

  def delete_patient (self, data):
    if all (param in data for param in ("ssn")):
      pf = PatientFunction()
      new_patient = json.loads(data)
      if len(new_patient["ssn"]) != 10:
        return '{"msg":"ssn input has to be of length 10"}'
      try:
        pf.delete_patient(new_patient)
        ssn = new_patient["ssn"]
        msg = f"Successfully deleted patient from the system: {ssn}"
        return '{"msg":"' + msg + '"}'
      except:
        return '{"msg":" This patient does not exist in the system"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: patientdetails."}'


  def see_patient (self, data):
    if "id" in data :
      return PatientFunction().get_patient(data)
    else:
      return '{"msg":"Invalid request. The following parameters are required: patientdetails."}'

  def see_patient_record (self, data):
    if "id" in data :
      #Here you call the actual operation in your backend code.
      return '{"msg":"Operation see_patient_record not yet implemented"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: id."}'

  def add_patient_record (self, data):
    if all (param in data for param in ("ssn", "date", "description")):
      pf = PatientFunction()
      new_patient_record = json.loads(data)
      if len(new_patient_record["ssn"]) != 10:
        return '{"msg":"cannot add a patient record where ssn is not length 10"}'
      pf.add_patient_record(new_patient_record)
      ssn = new_patient_record["ssn"]
      msg = f"Successfully added patient record with ssn: {ssn} to patient records"
      return '{"msg":"' + msg + '"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: patientdetails."}'

  def add_doctors (self, data):
    
    data = json.loads(data)

    if "ssn" in data and "name" in data and "occupation" in data:
      if len(data["ssn"]) != 10:
        return '{"msg: "SSN must be of length 10!"}'
      if data["name"] in self.doctor_functions.doctor_data:
        
        return '{"msg: "This doctor is already in the system"}'
      
    else:
      return '{"msg":"Invalid request. The following parameters are required: doctordetails."}'
    
    #Here you call the actual operation in your backend code.
    self.doctor_functions.add_doctors(data)
    return '{"msg": "Doctor has been added to the system.}'

  def update_doctor(self, data):
    """Checks if ssn is in db, then changes name and occupation of that doctor to new name and occupation"""
    #check if data has all required parameters
    if all (param in data for param in ("ssn", "name", "occupation")):
      data = json.loads(data)
      
      if (self.doctor_functions.find_doctor(data["ssn"])):
        return '{"msg":"Doctor with this ssn is not in the system"}'
      
      self.doctor_functions.update_doctors(data)
      return '{"msg":"Doctor has been updated."}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: ssn, name, occupation"}'

  def remove_doctors (self, data):
    if (param in data for param in ("ssn")):
      df = DoctorFunctions()
      my_doc = json.loads(data)
      if len(my_doc["ssn"]) != 10:
        return '{"msg: "SSN must be of length 10!"}'
      try:
        df.remove_doctors(my_doc)
        ssn = my_doc["ssn"]
        name = my_doc["name"]
        occupation = my_doc["occupation"]
        return '{"msg":"ssn: {}", "name": {}", "occupation: {}", "removed"}'.format(ssn, name, occupation)
      except:
        return '{"msg":"Invalid request. This doctor is not in the system"}'
    else:
      return '{"msg":"SSN must be of length 10!"}'

  def doctor_appointments (self, data):
    if "id" in data :
      #Here you call the actual operation in your backend code.
      return '{"msg:":"New doctor added"}'
      #return '{"msg":"Operation doctor_appointments not yet implemented"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: id."}'

  def add_nurses (self, data):
    if "nursedetails" in data :
      #Here you call the actual operation in your backend code.
      return '{"msg":"Operation add_nurses not yet implemented"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: nursedetails."}'
  
  def get_nurse (self, data):
    if "ssn" in data :
      return NurseFunctions().get_nurse(data)
    else:
      return '{"msg":"Invalid request. The following parameters are required: ssn."}'

  def add_drugs_to_inventory (self, data):
    """ Add a new drug to inventory, must include the parameters: name, quantity, strength, price, strength can be blank"""

    #check if data has all required parameters, strength can be an empty string if there are no variants of the strength.
    if all (param in data for param in ("name", "quantity", "strength", "price")):
      #Here you call the actual operation in your backend code.
      drug = Drug(json.loads(data))

      if drug.name == "":
        return '{"msg":"Invalid request. Name cannot be blank"}'
      if not drug.quantity.isdigit():
        return '{"msg":"Invalid request. Quantity cannot be blank and has to be a digit"}'
      if drug.price == "":
        return '{"msg":"Invalid request. price cannot be blank"}'

      self.drug_functions.add_drug_to_inventory(drug)

      return '{"msg":"Successfully added drug to inventory"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: name, quantity, strength, price."}'

  def view_medical_history (self, data):
    if "id" in data :
      #Here you call the actual operation in your backend code.
      return '{"msg":"Operation view_medical_history not yet implemented"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: id."}'

  def order_drugs (self, data):
    #check if data has all required parameters, strength can be an empty string if there are no variants of the strength.
    if all (param in data for param in ("name", "quantity", "strength")):
      #Here you call the actual operation in your backend code.
      drug = Drug(json.loads(data))
      self.drug_functions.order_drugs(drug)
      msg = f"drug {drug.name} ordered from pharmacy"
      return '{"msg":"' + msg + '"}'
    else:
      return '{"msg":"Invalid request. The following parameters are required: name, quantity, strength."}'

  def view_drug_inventory (self, data):
    """Returns all drug inventory in json format"""
    #Here you call the actual operation in your backend code.
    return self.drug_functions.get_drug_inventory()

  def create_appointment(self, data):
    """
    Creates a new appointment and adds to the server
    """
    if all(param in data for param in ("doctor_id", "patient_id", "date", "time")):
      af = AppointmentFunctions()
      data = json.loads(data)

      doctor_id = data["doctor_id"]
      patient_id = data["patient_id"]
      date = data["date"]
      time = data["time"]
      af.create_appointment(doctor_id, patient_id, date, time)
      return  '{"msg": "Appointment created. }'
    else:
      return '{"msg":"Invalid request. The following parameters are required: doctor id, patient id, date, time"}'

