# Autogenerated from websocket_controller.template file
import asyncio
import json
import websockets
from app.hospitalserver_if import *

class HospitalserverPort:
    __instance = None

    @staticmethod
    def get_instance():
        """ Static access method. """
        if HospitalserverPort.__instance == None:
            HospitalserverPort()

        return HospitalserverPort.__instance

    def __init__(self):
        if HospitalserverPort.__instance != None:
            raise Exception("This class is a singleton!")
        else:
            HospitalserverPort.__instance = self
            self.iface = HospitalserverInterface()

    async def __msg_handler(self, websocket, path):
        msg = await websocket.recv()
        try:
          data = json.loads(msg)
        except  json.decoder.JSONDecodeError:
          return_value = json.dumps({"msg": "No valid JSON data provided."})
        
        if "op" in data:
            try:
                print("trying to call %s" % (data["op"]))
                return_value = getattr(self.iface, data["op"])(data["data"])
            except AttributeError:
                return_value = json.dumps({"msg": "Method %s not implemented" % (data["op"])})
        else:
            return_value = json.dumps({"msg": "Invalid data format. Op field is required."})

        await websocket.send(return_value)

    #In case you want multiple interfaces/ports, you will have to modify your generated code so that there is only a single main file taking care of all ports.
    def start(self):
        url = "127.0.0.1"        
        port = 8888
        start_server = websockets.serve(self.__msg_handler, url, port)

        print(f"Listening on ws://{url}:{port}")
        asyncio.get_event_loop().run_until_complete(start_server)
        asyncio.get_event_loop().run_forever()


if __name__ == '__main__':
    compPort = HospitalserverPort.get_instance()
    compPort.start()